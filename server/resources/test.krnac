
fn fn r1 ():i {
    call_static 0 test.main []
    exit 0
}
obj test.SomeObject [i] { time, get_half_time }
fn test.main r1 ():i {
    call_static 0 test.call_me []
    load_int 0 0
    return_value 0
}


fn test.call_me r3 ():i {
    load_int 0 2000
    call_static 1 test.Some [0]
    call_static 0 test.call_with [1]
    call_static 1 test.None []
    call_static 2 test.call_with [1]
    binary IntAdd 0 0 2
    load_int 0 0
    return_value 0
}


fn test.call_with r2 (p):i {
    load_int 1 0
    return_value 1
}


fn test.Some r1 (i):p {
    return_value -1
}


fn test.None r1 ():p {
    return_value -1
}


fn test.get_time r1 ():i {
    call_native 0 test.get_time []
    return_value 0
}


fn test.println r2 (i):v {
    call_native 1 test.println [0]
    return_value 1
}


fn test.SomeObject.get_half_time r3 (p):i {
    get_field 1 0 0
    load_int 2 2
    binary IntDivide 1 1 2
    return_value 1
}