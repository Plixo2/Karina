import test.Entity
import test.EntityPlayer


object Entity() {
    virtual fn move(x: float, y: float, z: float) -> void {
        println("Moving")
    }
    override fn move(x: float, y: float, z: float) {
        println("Moving")
    }
}

object EntityPlayer() extends Entity() {
    jump: fn() -> void = fn() {
        self.move(0, 0.42, 0)
    }
}


fn main() -> void {
    let find = list[0]
    if find is Some(value) {
        print("Found" + value)
    } else {
        print("Not found")
    }

    while true {
        for i in players {
            let a = 1 + 2
            let c = (1 * 2 + 4) < 5 && 6 >= 1999
            if c {
                println("Hello")
            } else {
                let b = 1
            }
        }
    }
}



object Option<T>() {
    fn unwrap() -> T {
        if self is Some(value) {
            value
        } else {
            panic("Option is None")
        }
    }
}


object Some<T>() extends Option<T>() {
    value: T = 1
}
object None<T>() extends Option<T>() {

}

native fn println(string: string) -> void {

}



object List<T>() {
    data: [T] = []
    capacity: int = 0
    length: int = data.length
    info: String<int> = "List of items"

    fn add(item: T) {
       // if self.length == self.capacity {
       //     self.capacity = self.capacity * 2
      //      let newData: [T] = newArrayFrom(data, 0, length, self.capacity)
       //     self.data = newData
      // }
       // self.data[self.length] = item
     //   self.length = self.length + 1
    }

    fn insertAny<O>() -> T {

    }

    fn length() -> int {
        self.length
    }
}



object Entity<S>(s: String<S>) : String<S>(s) {
    fn test() -> void {
       // println("test")
    }
    override fn test2() -> void {
       // println("test2")
    }
}


object String<S>(data: [int]) {
    length: int = data.length
    virtual fn test2() -> void {

    }
}

fn newObject<S>() -> S {
    s
}


@Link = [
    {
        "target": "java",
        "source": "java.io.Files.read",
        "name": "newArrayFrom"
    },
    {
        "target": "c",
        "source": "libs/std.dll",
        "name": "newArrayFrom"
    }
]
native fn newArrayFrom<T>(arr: [T], start: int, end: int, capacity: int) -> [T] {

}