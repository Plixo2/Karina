// ! means that the token or rule is required, so the parser throws an error if it cannot be matched.
// ? means that the token or rule is optional
// * means that the token or rule can be repeated zero or more times
// Use parentheses to create sub expressions

unit ::= item*
item ::= import | class | function | enum

enum ::= "enum" id! genericHintDefinition? "{" enumMember* "}"!
enumMember ::= id (  "(" (type ("," type!)* )? ")"! )?


import ::= "import" dotWordChain!

annotation ::= "@" id! "="! jsonValue!

function ::= annotation* functionModifier? "fn" id! genericHintDefinition? "("! parameterList! ")"! ("->" type!)? (block | "=" expression!)!
functionModifier ::= "override" | "native" | "virtual"
parameterList ::= (parameter ("," parameter!)*)?
parameter ::= id ":"! type!

class ::= annotation* "struct" id! genericHintDefinition? ( "{" (field | function)* "}"! )?
field ::= id ":"! type!


type ::= "void" | "int" | "float" | "bool" | "string" | "?" | dotWordChain genericHint? | arrayType | functionType
arrayType ::= "[" type! "]"!
functionType ::= "fn" "("! typeList! ")"! ("->" type!)?
typeList ::= (type ("," type!)*)?

dotWordChain ::= id ("." id!)*
commaWordChain ::= id ("," id!)*

genericHint ::= "<" (type ("," type!)* )? ">"!
genericHintDefinition ::= "<" (id ("," id!)* )? ">"!

expressionList ::= (expression ("," expression!)*)?

expression ::= variableDefinition | conditionalOrExpression | closure | "return" expression?
variableDefinition ::= "let" id! (":" type!)? "="! expression!
conditionalOrExpression ::= conditionalAndExpression ("||" conditionalOrExpression!)?
conditionalAndExpression ::= equalityExpression ("&&" conditionalAndExpression!)?
equalityExpression ::= relationalExpression (("==" | "!=") equalityExpression!)?
relationalExpression ::= additiveExpression (("<" | ">" | "<=" | ">=") relationalExpression!)?
additiveExpression ::= multiplicativeExpression (("+" | "-" | "&") additiveExpression!)?
multiplicativeExpression ::= unaryExpression (("*" | "/" | "%") multiplicativeExpression!)?
unaryExpression ::= ("-" | "!") factor! | factor
factor ::= object postFix* ("=" expression!)?
postFix ::= "." id! | "(" expressionList! ")"! | "[" expression! "]"!
object ::= match | if | while | for | block | array | "(" expression! ")"! | number | "break" | id | stringLiteral | "self" | "super" | new | "true" | "false"


match ::= "match" expression! "{"! matchCase* "}"!
matchCase ::= (matchDestructor | matchElse) "->"! expression!

matchDestructor ::= id "(" commaWordChain? ")"!
matchElse ::= "_"

new ::= "new" type! ( "{" initList! "}"! )?
initList ::= (memberInit ("," memberInit!)*)?
memberInit ::= id ":"! expression!

array ::= "[" expressionList! "]"!

closure ::= "fn" "("! closureTypeList! ")"! ("->" type!)? expression
closureTypeList ::= (closureType ("," closureType!)*)?
closureType ::= id (":" type!)?


if ::= "if" expression! block! branchOpt?
branchOpt ::= "else" expression!

for ::= "for" id! "in"! expression! block!
while ::= "while" expression! block!

block ::= "{" expression* "}"!

id ::= "word"
number ::= "number"
stringLiteral ::= "stringliteral"


jsonObject ::= "{" jsonMembers "}"!
jsonMembers ::= (jsonMember ("," jsonMember!)*)?
jsonMember ::= (stringLiteral | id) ":"! jsonValue!
jsonValue ::= jsonObject | jsonArray | stringLiteral | number | "true" | "false" | "null"
jsonArray ::= "[" JsonElements! "]"!
JsonElements ::= (jsonValue ("," jsonValue!)*)?



